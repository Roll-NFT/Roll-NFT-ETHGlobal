// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";

/**
 * @title NFT contract representing Collection of Roll ownerships
 * @author Loizage
 * 
 * @dev Implements ERC721 contract with URIStorage, AccessControlEnumerable
 * 
 * Contract is pausable - that stops ERC721 transfers. Mint and Burn functions are not affected by Pause trigger
 * See {ERC721Pausable - _beforeTokenTransfer}
 * 
 * @notice 
 * @custom:security-contact loizage@icloud.com
 */
contract RollOwnershipToken is Context, AccessControlEnumerable, ERC721Pausable, ERC721Enumerable, ERC721URIStorage {

    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");

    string private _baseTokenURI;
    
    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE` and `MANAGER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory baseTokenURI,
        address manager
    ) ERC721("Roll ownership Token collection", "ROLT") {

        /**
         * @dev set base Token URI
         */
        _setBaseURI(baseTokenURI);
        
        /**
         * @dev grant deployer a `DEFAULT_ADMIN_ROLE` and `MANAGER_ROLE`
         */
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MANAGER_ROLE, _msgSender());

        /**
         * @dev grant manager address a `MANAGER_ROLE`
         */
        _setupRole(MANAGER_ROLE, _msgSender());
        
    }

    function safeMint(address to, uint256 tokenId, string memory uri)
        external
        onlyOwner
    {
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
    }

    /**
     * @dev burn function available for `BURNER` role
     * 
     * @param tokenId - ID of the token to burn
     */
    function burn(uint256 tokenId) external onlyOwner {
        _burn(tokenId);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `MANAGER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(MANAGER_ROLE, _msgSender()), "ERC721RollMinterBurnerPauser: must have manager role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `MANAGER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(MANAGER_ROLE, _msgSender()), "ERC721RollMinterBurnerPauser: must have manager role to unpause");
        _unpause();
    }

    /**
     * @dev Returns collection's base URI
     * 
     * That is used to autogenerate Token URIs - using `baseURI` and their token IDs.
     */
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Set _baseTokenURI
     * 
     * Requirements:
     * 
     * - the caller must have the `MANAGER_ROLE`.
     */
    function setBaseURI(string memory baseTokenURI) public virtual {
        require(hasRole(MANAGER_ROLE, _msgSender()), "ERC721RollMinterBurnerPauser: must have manager role to set BaseURI");
        _setBaseURI(baseTokenURI);
    }

    /**
     * @dev Set _baseTokenURI
     * 
     * Internal use 
     */
    function _setBaseURI(string memory baseTokenURI) internal {
        _baseTokenURI = baseTokenURI;
    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

}
